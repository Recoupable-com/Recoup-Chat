import { z } from "zod";
import { tool } from "ai";
import { withBrowser } from "@/lib/browser/withBrowser";
import { captureScreenshot } from "@/lib/browser/captureScreenshot";

/**
 * Browser Observe Tool
 * Discovers available actions and interactive elements on web pages
 */
const browserObserve = tool({
  description: `Observe and analyze web pages like a human would - sees content even behind login popups.

WHEN TO USE THIS TOOL:
âœ“ Before extracting data - to understand what's on the page
âœ“ Finding interactive elements (buttons, forms, links)
âœ“ Checking if data is visible despite login walls
âœ“ Understanding page structure and available actions
âœ“ BEST for social media profiles with login overlays

KEY CAPABILITY - SEES LIKE A HUMAN:
â€¢ This tool can VIEW content that's rendered on the page
â€¢ Works on public profiles even with login popups
â€¢ Instagram, TikTok, Twitter profiles are visible
â€¢ The login popup is an overlay - content is underneath
â€¢ Can see follower counts, bios, posts without authentication

WHAT IT DISCOVERS:
â€¢ Interactive elements (buttons, links, forms)
â€¢ Visible text and data on the page
â€¢ Navigation options
â€¢ Available actions you can take with browser_act
â€¢ Whether login is truly required or just a popup

USE CASES:
âœ“ "Observe Instagram profile - can you see follower count?"
âœ“ "Check what's visible on this TikTok page"
âœ“ "Find the close button on the login popup"
âœ“ "What data can be extracted from this page?"

WORKFLOW:
1. Use browser_observe to see what's visible
2. If login popup exists, use browser_act to dismiss it
3. Use browser_extract to get the specific data

This tool is particularly effective for social media scraping where data is public but a login popup appears.`,
  inputSchema: z.object({
    url: z
      .string()
      .url()
      .describe("The URL of the webpage to observe"),
    instruction: z
      .string()
      .optional()
      .describe(
        "Optional instruction to guide the observation (e.g., 'find submit buttons', 'locate navigation menu')"
      ),
  }),
  execute: async ({ url, instruction }) => {
    try {
      return await withBrowser(async (page, sessionUrl) => {
        await page.goto(url, { waitUntil: "domcontentloaded" });

        const observeResult = await page.observe({
          instruction: instruction || "Find all interactive elements and actions",
        });

        const screenshotUrl = await captureScreenshot(page, url);

        const actions = Array.isArray(observeResult)
          ? observeResult
          : [observeResult];

        const actionsText = actions.length > 0
          ? actions.join("\n- ")
          : "No specific actions identified";

        const responseText = sessionUrl
          ? `Available actions on the page:\n- ${actionsText}\n\nðŸŽ¥ [View Browser Recording](${sessionUrl})`
          : `Available actions on the page:\n- ${actionsText}`;

        const content: Array<{ type: string; text?: string; image?: string }> = [
          { type: "text", text: responseText }
        ];

        if (screenshotUrl) {
          content.push({
            type: "image",
            image: screenshotUrl,
          });
        }

        return {
          content,
          isError: false,
        };
      });
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Failed to observe page: ${
              error instanceof Error ? error.message : "Unknown error"
            }`,
          },
        ],
        isError: true,
      };
    }
  },
});

export default browserObserve;

