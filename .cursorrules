# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages

# Scratchpad

## Current Task: Update Web Components to Use New Segments Tables

Task: Update web components to use artist_segments table for segment names and fan_segments for counts.

### Database Schema Analysis

1. Tables Structure:

   - `segments`: Core table with standardized segment names
     - Fields: id, name, updated_at
   - `artist_segments`: Links artists to segments
     - Fields: id, artist_account_id, segment_id, updated_at
     - Relations: segments(id) -> segment_id
   - `fan_segments`: Links fans to segments
     - Fields: id, fan_social_id, segment_id, updated_at
     - Relations: segments(id) -> segment_id

2. Data Flow:
   - Artist -> artist_segments -> segments (for names)
   - fan_segments -> segments (for counts)
   - Join these to get complete segment info

### Current State Analysis

1. Current Implementation:

   - Components use `artist_fan_segments` table directly
   - Segments are grouped by name in `getArtistSegments`
   - Size is calculated by counting occurrences
   - No direct link to artist_segments table

2. Required Changes:
   - Use `artist_segments` table to link artists to segments
   - Use `segments` table for standardized segment names
   - Use `fan_segments` table for fan counts
   - Update data fetching and display logic

### Implementation Progress

[X] Update Data Fetching:

- [x] Create new query structure with proper joins:
  - [x] artist_segments <> segments for names
  - [x] artist_segments <> fan_segments for counts
- [x] Add proper types for new data structure
- [x] Update getArtistSegments to use new tables
- [x] Simplified query by removing unnecessary social IDs lookup
- [x] Optimized query to use SQL COUNT instead of fetching all records

[X] Update Components:

- [x] Modify useArtistSegments hook to use artistId
- [x] Update segment display components
- [x] Preserve existing UI and functionality

[X] Fix Database Column Name Bug:

- [x] Fix column name mismatch in getSegments.ts
  - [x] Changed `artist_id` to `artist_account_id` in query
  - [x] Updated types to match database schema
  - [x] Ready for testing with correct column name

[X] Refactor Segment Functions:

- [x] Split getSegments.ts into three separate files:
  1. getArtistSegmentNames.ts:
     - Single function to get segments for given artist
     - Join with segments table for names
     - Return segment details (id, name)
  2. getSegmentCounts.ts:
     - Single function to get fan counts
     - Uses SQL COUNT for efficiency
     - Return counts by segment_id
  3. getSegments.ts:
     - Main function to combine names and counts
     - Returns final format for UI

[X] Fix Front-end Artist ID Issue:

- [x] Fix incorrect ID being passed to useArtistSegments
  - [x] Change from passing socialIds array to selectedArtist.account_id
  - [x] Update hook to use correct artist account ID
  - [x] Add type validation for single ID

[X] UI Improvements:

- [x] Filter out segments with zero counts in useArtistSegments hook
- [x] Add proper typing for segment filtering
- [x] Fix segment count display to use size instead of fan_count

[ ] Align Components:

- [ ] Update FunnelAnalysisProvider to use same segment format as page
- [ ] Consider consolidating Segments.tsx and BaseSegments.tsx
- [ ] Ensure consistent property names (size vs fan_count)

[ ] Verify Integration:

- Test segment display
- Verify fan counts
- Check report generation still works

[ ] Cleanup:

- Remove deprecated getArtistSegments.ts file
- Update any remaining imports to use getSegments.ts
- Add migration note in documentation

### Progress

✓ Identified current implementation
✓ Located components to update
✓ Created new database query structure with proper joins
✓ Updated components to use new data
✓ Simplified query by removing unnecessary joins
✓ Optimized query performance with SQL COUNT
✓ Fixed column name mismatch in query
✓ Refactored into separate segment functions
✓ Fixed incorrect artist ID being passed from front-end
✓ Added filtering for zero-count segments

### Next Steps

1. Test the changes
2. Clean up deprecated files
3. Add documentation

Would you like me to implement the split functions in getSegments.ts?

## Current Task: Update Segment Report API Parameters

Task: Update the client call to pass only the new segmentId parameter and remove legacy variables from the call to api.recoupable.com/api/create_report.

### Current Implementation Analysis

1. Current API Call:

   - Endpoint: `${AGENT_API}/api/create_report`
   - Parameters:
     - agentId: string
     - address: string
     - segmentName: string
     - email: string
     - artistId: string

2. Required Changes:
   - Simplify to only use segmentId
   - Remove legacy parameters
   - Update API documentation
   - Update client code

### Implementation Plan

[X] API Documentation:

- [x] Create documentation for /api/create_report endpoint
- [x] Document new parameter structure
- [x] Get documentation verified

[X] Client Code Updates:

- [x] Update createReport.tsx to use new parameter structure
- [x] Update useGenerateSegmentReport hook
- [x] Remove unused parameters
- [x] Add proper TypeScript types

[X] Bug Fixes:

- [x] Fixed getArtistSegments to return correct segment ID (using segment_id instead of artist_segments.id)

[ ] Testing:

- [ ] Verify API documentation accuracy
- [ ] Test report generation with new parameters
- [ ] Ensure backward compatibility if needed

### Progress

✓ Analyzed current implementation
✓ Identified parameters to remove
✓ Created implementation plan
✓ Created API documentation
✓ Added TypeScript types for request/response
✓ Updated createReport function to use new types
✓ Updated useGenerateSegmentReport hook
✓ Updated Segments component to use segment ID
✓ Fixed segment ID bug in getArtistSegments

### Next Steps

1. Test the changes with fixed segment IDs
2. Ensure backward compatibility
3. Deploy the changes

Would you like me to help you test the changes?
