# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages

# Scratchpad

## Current Task: Remove Social Platform from Wrapped Report

### Task Description

Add functionality to remove unwanted social platforms from the verification step of the wrapped report.

### Problem Statement

Currently, all available social platforms are shown in the verify step without an option to remove platforms where the musician doesn't have a profile. This creates unnecessary clutter and confusion.

### Requirements

1. Core Requirements:

   - Add "X" button next to each social platform in verify step
   - Allow removal of platforms without affecting other parts of the report
   - Update UI and internal state on removal
   - Prevent triggering agent runs for removed platforms

2. Technical Constraints:
   - Must maintain existing verification flow for non-removed platforms
   - State updates should be atomic and consistent
   - UI changes should be intuitive and responsive

### Action Plan

[ ] Review current implementation

- Identify components handling social platform display
- Understand state management for platform verification
- Review agent triggering logic

[ ] Design and implement changes

- Add removal UI components
- Implement state updates for platform removal
- Update agent run logic to skip removed platforms

[ ] Testing and validation

- Verify UI updates correctly
- Confirm state management works
- Test agent run behavior
- Check edge cases (e.g., removing all platforms)

[ ] Documentation and cleanup

- Update relevant documentation
- Clean up any debug code
- Add comments for complex logic

### Progress

[X] Review current implementation
Key findings:

1. Social platform verification is handled in these key components:

   - `components/Funnels/VerifyingSocials.tsx`: Main container for verification UI
   - `components/Funnels/InputHandle.tsx`: Handles input and state management for social handles
   - `providers/FunnelAnalysisProvider.tsx`: Manages global state for handles and verification
   - `hooks/useFunnelAnalysisParams.tsx`: Contains the state management logic

2. State Management:

   - Handles are stored in the `handles` state in FunnelAnalysisProvider
   - `setHandles` function is used to update the handles state
   - Changes to handles affect agent runs and verification flow

3. Implementation Plan:
   - Add "X" button to each social platform input in InputHandle component
   - Update handle state management to support platform removal
   - Ensure agent runs skip removed platforms
   - Add visual feedback for platform removal

Next steps:
[X] Modify InputHandle component to add removal button

- Added X button with proper styling
- Implemented handleRemove function
- Updated layout to accommodate new button
- Added hover effects and tooltip
  [X] Update handle state management in FunnelAnalysisProvider
- Verified that removed platforms are automatically excluded from agent runs
- No additional changes needed as the current implementation handles this correctly
  [X] Test platform removal functionality
- Confirmed that removing a platform updates the handles state
- Verified that removed platforms are not included in agent runs
  [X] Add visual feedback and styling
- Added fade-out and slide-out animation for platform removal
- Added disabled state during animation
- Improved hover states and transitions
- Added focus state to input fields
- Added group hover effect for X icon

Implementation complete! The social platform removal feature now provides:

1. Clear visual indication of removable platforms
2. Smooth animations for better user experience
3. Proper state management that excludes removed platforms from agent runs
4. Responsive and accessible UI with proper hover and focus states

Current focus: None - all tasks completed successfully.
