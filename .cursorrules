# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages

# Scratchpad

## Current Task: Redesign Verify Step UI

### Task Description

Update the verify step UI to align with new Figma design, replacing the legacy implementation. The current implementation uses a basic layout with minimal styling and doesn't meet updated visual guidelines.

### Current Implementation Analysis

1. Components Structure:

   - `VerifyingSocials.tsx`: Main container component
   - `InputHandle.tsx`: Handles input management and layout
   - `SocialPlatformInput.tsx`: Individual platform input fields

2. Current Features:

   - Basic input fields for social handles
   - Remove platform functionality
   - Continue button
   - Loading state
   - Platform-specific validation

3. UI Issues:
   - Basic styling with minimal visual hierarchy
   - Limited visual feedback for user actions
   - No progress indication between steps
   - Lacks modern design elements
   - Not fully responsive

### Analysis Steps

[X] 1. Investigation

- Reviewed current implementation
- Identified key components
- Analyzed component relationships
- Found areas needing improvement

[X] 2. Planning

- Break down UI updates into components
- Plan new component structure
- Define shared styles and animations
- Consider accessibility improvements

[X] 3. Implementation

- Created new components:
  - `VerifyCard`: Modern card container with consistent styling
  - `SocialHandleInput`: Platform-specific input with icons
  - `SocialHandleList`: Manages list of inputs with animations
  - `ProgressIndicator`: Shows current step in process
- Updated `VerifyingSocials` to use new components
- Added smooth animations and transitions
- Implemented responsive design

[ ] 4. Testing

- Test responsive behavior
- Verify animations
- Check accessibility
- Test edge cases

### Progress

Completed implementation of new UI components with modern design:

- Added card-based layout with proper spacing
- Implemented platform-specific icons
- Added progress indicator
- Improved input field styling and interactions
- Added smooth animations for transitions

Next steps:

1. Test the new components across different screen sizes
2. Verify all animations work smoothly
3. Check accessibility compliance
4. Test edge cases with different handle combinations
