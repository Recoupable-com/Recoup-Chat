# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using React Query with Next.js, prefer direct data access over redundant local state to avoid synchronization issues
- Use whitespace-nowrap to prevent text from breaking into multiple lines in fixed-height buttons
- When displaying sorted data, create a new sorted array to avoid mutating props
- For React Query data fetching, consider adding isFetching to loading states to prevent flash of incorrect content
- For data fetching components, prefer passing data as props from a parent container rather than fetching directly in presentational components to improve reusability, testing, and maintain single source of truth
- When mapping over data to create UI elements, extract complex elements into their own components to improve reusability, testability, and maintainability rather than defining them inline
- When using Langchain with Vercel AI SDK, use the built-in LangChainAdapter to properly connect streaming responses with the UI
- When using LangGraph's MemorySaver, ensure thread_id is provided in the configurable property of agent.stream() calls

# Scratchpad

## Current Task: Implement Report Generation in /segment/[segmentId] (Step 25)

### Database Schema

1. segment_rooms Table:

```typescript
{
  id: string; // Primary key
  room_id: string; // Foreign key to rooms.id
  segment_id: string; // Foreign key to segments.id
  updated_at: string; // Timestamp
}
```

2. Relationships:
   - segment_rooms.room_id -> rooms.id
   - segment_rooms.segment_id -> segments.id

### Task Analysis

When visiting /segment/[segmentId], check if a segment_room exists. If not, generate a report and create a new segment_room record.

### Current State

1. Report Generation:

   - useGenerateSegmentReport hook exists with:
     - handleGenerateReport(segmentId, segmentName) -> creates report
     - openReportChat(segmentId, segmentName) -> redirects to /report/[reportId]
   - Currently used in Segments component

2. Database State:
   - segment_rooms table links segments to rooms
   - Each record represents a segment's chat room
   - No automatic creation of segment_rooms records
   - Reports are generated but not linked to segment_rooms

### Key Architecture Decision: Minimal Changes Approach

Current Available Functions:

1. `getSegmentRoom(segmentId)` - Checks if room exists
2. `createRoom(account_id, content)` - Creates a new room
3. `createSegmentRoom({ segment_id, room_id })` - Links segment to room

Simplified Flow:

```typescript
// In server component:
1. Check if room exists via getSegmentRoom
2. If no room:
   - Create room via createRoom
   - Create segment_room record via createSegmentRoom
```

### Required Changes (Updated)

[X] Phase 1: Check Segment Room

- Create getSegmentRoom query using segment_id ✓
- Add useEffect to check on route load ✓
- Handle loading state during check ✓

[X] Phase 1.5: Convert to Server Component

- Move getSegmentRoom to server component ✓
- Split into page.tsx (server) and SegmentPage.tsx (client) ✓
- Handle loading state with Suspense ✓

[X] Phase 2: Room Creation (Simplified)

1.  Get account_id and content for createRoom ✓
    - Query segments table for artist ID and name
    - Use for room creation parameters
2.  Use existing createRoom function ✓
3.  Create segment_room record with new room_id ✓

[ ] Phase 3: Fix Data Loading

1. Update segments query:
   - Change inner join to left join
   - Handle missing artist case
   - Better error messages
2. Add error states:
   - Segment not found
   - Artist not found
   - Room creation failed
3. Add loading states:
   - Initial load
   - Room creation
   - Error states

### Implementation Progress

1. Completed:

   - Created getSegmentRoom query
   - Converted to server component architecture
   - Added proper loading states with Suspense
   - Added room creation flow
   - Fixed database schema issues

2. Next Steps:
   - Fix segment query to handle missing artist
   - Add better error handling for different cases
   - Add proper loading states

### Success Criteria (Updated)

1. Segment room existence is checked server-side ✓
2. Missing rooms trigger room creation using existing functions ✓
3. New segment_rooms records created with proper foreign keys ✓
4. Loading states shown during check/creation ✓
5. Error states handled gracefully ⚠️
6. Minimal changes to existing codebase ✓
7. All API calls use absolute URLs ✓
8. Environment variables properly validated ✓
9. Handle missing artist_segments gracefully ⚠️

Would you like me to:

1. Update the segments query to use left join?
2. Add better error handling for missing artist case?
3. Add more specific error messages?

### New Errors Analysis (Updated)

1. Segment Not Found Error:
   ```
   Error fetching segment: {
     code: 'PGRST116',
     details: 'The result contains 0 rows',
     hint: null,
     message: 'JSON object requested, multiple (or no) rows returned'
   }
   ```

Root Cause:

- Inner join with artist_segments failing
- Segment exists but no matching artist_segment record
- Using `.single()` on empty result

Required Changes:

1. Make artist_segments join optional (left join)
2. Handle case where segment exists but has no artist
3. Better error messages for different scenarios

### Required Changes (Updated)

[X] Phase 1: Check Segment Room

- Create getSegmentRoom query using segment_id ✓
- Add useEffect to check on route load ✓
- Handle loading state during check ✓

[X] Phase 1.5: Convert to Server Component

- Move getSegmentRoom to server component ✓
- Split into page.tsx (server) and SegmentPage.tsx (client) ✓
- Handle loading state with Suspense ✓

[X] Phase 2: Room Creation (Simplified)

1.  Get account_id and content for createRoom ✓
    - Query segments table for artist ID and name
    - Use for room creation parameters
2.  Use existing createRoom function ✓
3.  Create segment_room record with new room_id ✓

[ ] Phase 3: Fix Data Loading

1.  Update segments query:
    - Change inner join to left join
    - Handle missing artist case
    - Better error messages
2.  Add error states:
    - Segment not found
    - Artist not found
    - Room creation failed
3.  Add loading states:
    - Initial load
    - Room creation
    - Error states

### Implementation Progress

1. Completed:

   - Created getSegmentRoom query
   - Converted to server component architecture
   - Added proper loading states with Suspense
   - Added room creation flow
   - Fixed database schema issues

2. Next Steps:
   - Fix segment query to handle missing artist
   - Add better error handling for different cases
   - Add proper loading states

### Success Criteria (Updated)

1. Segment room existence is checked server-side ✓
2. Missing rooms trigger room creation using existing functions ✓
3. New segment_rooms records created with proper foreign keys ✓
4. Loading states shown during check/creation ✓
5. Error states handled gracefully ⚠️
6. Minimal changes to existing codebase ✓
7. All API calls use absolute URLs ✓
8. Environment variables properly validated ✓
9. Handle missing artist_segments gracefully ⚠️

Would you like me to:

1. Update the segments query to use left join?
2. Add better error handling for missing artist case?
3. Add more specific error messages?
