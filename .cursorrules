# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using React Query with Next.js, prefer direct data access over redundant local state to avoid synchronization issues
- Use whitespace-nowrap to prevent text from breaking into multiple lines in fixed-height buttons
- When displaying sorted data, create a new sorted array to avoid mutating props
- For React Query data fetching, consider adding isFetching to loading states to prevent flash of incorrect content
- For data fetching components, prefer passing data as props from a parent container rather than fetching directly in presentational components to improve reusability, testing, and maintain single source of truth
- When mapping over data to create UI elements, extract complex elements into their own components to improve reusability, testability, and maintainability rather than defining them inline
- When using Langchain with Vercel AI SDK, use the built-in LangChainAdapter to properly connect streaming responses with the UI

# Scratchpad

## Current Task: Debug createReactAgent Implementation

### Latest Log Analysis (2024-03-XX)

[X] Stream Analysis:

```typescript
[Chat] Stream content type: {
  type: 'object',
  isIterable: false,
  hasAsyncIterator: true
}

[Chat] Chunk structure: {
  type: 'object',
  keys: [ 'agent' ],
  content: { agent: { messages: [Array] } }
}
```

[X] Key Findings:

1. Stream is correctly created as AsyncIterable
2. Chunks have correct agent structure
3. Error occurs in forwardAIMessageChunk during transformation
4. Content is not being properly extracted from the chunk

### Reference Implementation Analysis

[X] AgentKit Example:

```typescript
for await (const chunk of stream) {
  if ("agent" in chunk) {
    console.log(chunk.agent.messages[0].content);
  } else if ("tools" in chunk) {
    console.log(chunk.tools.messages[0].content);
  }
}
```

[X] Vercel AI SDK Requirements:

1. LangChainAdapter expects content to be directly iterable
2. Need to transform agent messages into content strings
3. SDK provides built-in stream transformation helpers

### Implementation Plan

[ ] Phase 1: Message Extraction

1. Add message content extraction:
   ```typescript
   const content = chunk.agent?.messages[0]?.content;
   if (typeof content === "string") {
     controller.enqueue(content);
   }
   ```

[ ] Phase 2: Stream Transformation

1. Use proper stream transformation:
   ```typescript
   const transformedStream = new TransformStream({
     async transform(chunk, controller) {
       if ("agent" in chunk) {
         const content = chunk.agent.messages[0].content;
         controller.enqueue(content);
       }
     },
   });
   ```

[ ] Phase 3: Integration

1. Update stream handling in chat route:
   ```typescript
   const finalStream = stream.pipeThrough(transformedStream);
   return LangChainAdapter.toDataStreamResponse(finalStream);
   ```

### Success Criteria

1. Each chunk should be properly transformed into string content
2. Stream should be properly piped through transformation
3. Response should be 200 OK with streaming content

### Next Steps

1. Implement message content extraction
2. Add proper stream transformation
3. Test with simple messages to verify 200 response

## Current Task: Implement createReactAgent with LangGraph

### Task Analysis

The task requires implementing createReactAgent from LangGraph to replace any unused or custom agent creation logic. We need to create a new initializeAgent function following the reference implementation from AgentKit-Launchpad-API.

### Current State

- createReactAgent function is not currently in use
- No LangGraph agent implementation exists
- No centralized agent initialization logic

### Required Changes

[X] Create lib/agent/initializeAgent.ts file
[X] Install required dependencies (@langchain/openai, @langchain/langgraph)
[X] Implement initializeAgent function
[X] Set up environment variables for OpenAI
[X] Create necessary types and interfaces
[X] Add error handling and validation

### Implementation Plan

1. First Phase - Setup
   [X] Install dependencies:

   - @langchain/openai
   - @langchain/langgraph
     [X] Create lib/agent directory structure
     [X] Set up environment validation

   Changes Made:

   1. Verified required dependencies in package.json
   2. Created lib/agent directory structure
   3. Created validateEnvironment.ts with:
      - Type-safe environment variable validation
      - Custom EnvironmentError class
      - Required env var checking
   4. Created types.ts with interfaces for:
      - AgentConfig
      - AgentResponse
      - AgentContext
      - AgentOptions

2. Second Phase - Implementation
   [X] Create initializeAgent.ts with basic structure
   [X] Implement OpenAI chat model initialization
   [X] Configure agent settings and message modifier
   [X] Set up memory saver for conversation history
   [X] Add proper TypeScript types
   [X] Implement error handling

   Changes Made:

   1. Created initializeAgent.ts with:
      - Environment validation
      - ChatOpenAI initialization
      - MemorySaver for conversation history
      - Music artist-specific message modifier
      - Proper error handling
      - TypeScript types throughout
   2. Updated validateEnvironment.ts to include MODEL_NAME
   3. Configured agent with:
      - Temperature of 0.7 for balanced creativity
      - Optional tools array
      - Checkpoint saving via MemorySaver
      - Music industry-focused personality

3. Third Phase - Integration
   [X] Connect initializeAgent with chat route
   [X] Update chat API to use the new agent
   [X] Add environment variables to .env.example
   [ ] Test agent functionality

   Changes Made:

   1. Updated app/api/chat/route.ts to:
      - Import and use initializeAgent
      - Initialize agent with room-specific thread
      - Use agent for streaming responses
      - Remove direct ChatOpenAI usage
   2. Added environment variables to .env.example:
      - OPENAI_API_KEY
      - MODEL_NAME
   3. Maintained compatibility with:
      - Existing memory creation
      - Prompt formatting
      - Stream response handling

Next Steps:

1. Test the agent functionality:
   - Verify environment variables are properly loaded
   - Test chat responses with different contexts
   - Verify memory persistence between chats
   - Check error handling in production environment

## Current Task: Debug createReactAgent Implementation

### Error Analysis from Logs

[X] Identified error location and type:

- Error occurs in `__start__` node
- Expected: Command object
- Received: array
- Error code: INVALID_GRAPH_NODE_RETURN_VALUE

[X] Traced message flow:

1. Message creation successful
2. Agent initialization successful
3. Error occurs during stream processing

### Understanding from References

[X] Key findings from AgentKit example:

1. Messages need specific structure:
   ```typescript
   {
     messages: [new HumanMessage(thought)];
   }
   ```
2. Stream processing needs chunk type checking:
   ```typescript
   if ("agent" in chunk) {
     console.log(chunk.agent.messages[0].content);
   } else if ("tools" in chunk) {
     console.log(chunk.tools.messages[0].content);
   }
   ```

[X] Required changes identified:

1. Update message format in chat route
2. Add proper stream chunk handling
3. Ensure agent configuration matches reference

### Next Steps

[ ] Update initializeAgent.ts:

1. Add proper message structure handling
2. Include stream chunk type checking
3. Match configuration with reference implementation

[ ] Modify chat route:

1. Update message wrapping
2. Add proper stream chunk processing
3. Enhance error handling for specific error types

### Do we understand enough to fix?

Yes, we have sufficient information to implement a fix:

1. We know the exact error (invalid return value format)
2. We have a working reference implementation
3. We understand the required message structure
4. We can see where the stream processing needs to change

The fix will involve:

1. Restructuring how we pass messages to the agent
2. Adding proper stream chunk type checking
3. Ensuring the agent configuration matches the reference implementation
4. Updating the error handling to be more specific

### Lessons Learned

1. LangGraph agents require specific message structures
2. Stream processing needs explicit chunk type checking
3. Agent configuration must match expected format exactly
4. Error handling should include specific checks for LangGraph errors
