# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using React Query with Next.js, prefer direct data access over redundant local state to avoid synchronization issues
- Use whitespace-nowrap to prevent text from breaking into multiple lines in fixed-height buttons
- When displaying sorted data, create a new sorted array to avoid mutating props
- For React Query data fetching, consider adding isFetching to loading states to prevent flash of incorrect content
- For data fetching components, prefer passing data as props from a parent container rather than fetching directly in presentational components to improve reusability, testing, and maintain single source of truth
- When mapping over data to create UI elements, extract complex elements into their own components to improve reusability, testability, and maintainability rather than defining them inline
- When using Langchain with Vercel AI SDK, use the built-in LangChainAdapter to properly connect streaming responses with the UI
- When using LangGraph's MemorySaver, ensure thread_id is provided in the configurable property of agent.stream() calls
- When implementing LangGraph tools, prefer using context over input parameters for values that should be available throughout the conversation
- For LangGraph agents, conditionally load tools based on context to optimize performance and maintain clean agent state
- When using React Query for polling endpoints, set appropriate staleTime and retry logic to prevent unnecessary refetching
- For polling endpoints with React Query, use the query state data to determine when to stop polling rather than adding new database fields
- When using ChatAnthropic with LangChain, use "claude-3.7-sonnet-reasoning" as the model name for Claude 3.7
- When using LangGraph with Claude 3.7, the message content is an array of objects with 'type' and 'text' fields, requiring special handling in stream transformation

# Scratchpad

## Current Task: Update Agent to Use ChatAnthropic (Step 32)

### Task Analysis

Current State:

- ‚úÖ ChatAnthropic integration is working for basic messages
- ‚ùå Tool invocations still failing after initial response
- ‚úÖ Stream transformation handling array-based content format
- ‚úÖ Logging added for debugging

Progress Made:

1. [x] Updated AgentMessage type to reflect Claude 3.7's message format
2. [x] Modified stream transformation to handle array content
3. [x] Added proper error handling for different message types
4. [‚úÖ] Initial messages now working
5. [‚ùå] Tool invocations still failing

Log Analysis:

1. Model Configuration Issue:

   - Current model name in initializeAgent.ts: "claude-3-7-sonnet-20250219"
   - Should be: "claude-3.7-sonnet-reasoning"
   - This mismatch could affect tool handling capabilities

2. Tool Response Format:

   - Tool responses are being processed but not properly transformed
   - The stream continues after tool invocation but content is empty
   - Suggests tool responses might have a different structure than agent messages

3. Stream Transformation:
   - Successfully extracting text content from initial messages
   - Tool use messages are being detected and formatted
   - But tool responses might be getting lost in transformation

Next Steps:

1. [x] Fix model name in initializeAgent.ts
2. [ ] Add logging for tool response structure:
   ```typescript
   if ("tools" in chunk) {
     console.log("[Stream Transform] Raw tool response:", {
       fullContent: chunk.tools.messages[0],
       contentType: typeof chunk.tools.messages[0].content,
     });
   }
   ```
3. [ ] Update tool response handling:

   - Check if tool responses follow same array format
   - Add special case for tool response format if different
   - Ensure tool results are properly streamed back

4. [ ] Test with simple tool invocation:
   - Use get_segment_fans tool as test case
   - Monitor complete message flow with new logging
   - Verify tool response format matches expected structure

Status: üîç Debugging - Model Name Mismatch Found
