# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages

# Scratchpad

## Current Task: Update onFunnelComplete Event for New Segments Table

Task: Update the onFunnelComplete functionality to use the artist_fan_segments table instead of the legacy table.

### Current State Analysis

1. Funnel Segments Flow:

   - `useFunnelAnalysis` hook polls agent status
   - When `isFinishedScraping(status)` is true:
     - Calls `getAgentsInfoFromStack` to get segments
     - Sets segments in `useFunnelAnalysisProvider`
   - UI transition in `ScrapingCaption`:
     - Shows loading while `isScraping(agentsStatus)`
     - Shows `Completion` when `isFinishedScraping(agentsStatus)`
   - `Completion` renders `CompletedAnalysis` which shows segments

2. Segments Page (New):
   - Located in `app/segments/page.tsx`
   - Uses `useArtistSegments` hook
   - Fetches from `artist_fan_segments` table via `/api/segments` endpoint
   - Uses social IDs from artist's account to fetch segments

### Implementation Plan

[ ] Update Segment Fetching in Funnel Flow:

- Modify `useFunnelAnalysis` to use `useArtistSegments` hook
- Keep using `isFinishedScraping` for UI transition
- Update segment data structure to match new format

[ ] Update CompletedAnalysis Component:

- Switch to use segments from `useArtistSegments`
- Update loading states to work with new data source
- Preserve existing UI and calculations

[ ] Preserve Report Generation:

- Keep existing handleGenerateReport functionality
- Update any segment data structure differences

[ ] Test Integration:

- Verify segments appear in both funnel and segments tab
- Test segment report generation
- Validate segment calculations

### Progress

✓ Analyzed current implementation
✓ Identified UI transition flow
✓ Located where to make changes

### Next Steps

1. Create new hook to handle segment fetching
2. Modify useFunnelAnalysis to use new hook
3. Update CompletedAnalysis component

Ready to proceed with implementation.
