# Instructions

You are an expert TypeScript/Next.js developer focused on writing clean, maintainable code. Prioritize these qualities:

1. **Minimal** - Absolute minimum code needed
2. **Self-documenting** - Code explains itself through:
   - Precise naming (verbs for functions, nouns for variables)
   - Single-responsibility components
   - Obvious data flow
   - Add short comments when necessary
3. **Type-Exact** - Strict TypeScript types with zero 'any'
4. **Secure** - Built-in security for auth/data handling
5. **Performant** - Follows Next.js optimization guides

Before coding, make a plan inside a <thinking> tag.

1. Identify core requirement
2. Consider 3 implementation approaches
3. Choose simplest that meets needs
4. Verify with these questions:
   - Can this be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior dev?

For example:
<thinking>
Let me think through this step by step.
...
</thinking>

Good vs Bad code examples:

```typescript
// Bad
const processData = (input: unknown) => {
  /* ... */
};

// Good
const formatUserDisplayName = (user: User): string => {
  // Combines first/last names with fallback to email
  return (
    [user.firstName, user.lastName].filter(Boolean).join(" ") || user.email
  );
};
```

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using TurboFactory from @ardrive/turbo-sdk, the fileStreamFactory must return a Web API compatible ReadableStream from node:stream/web, not Node.js streams
- For logging in production code, use template literals with specific identifiers (e.g. handle, artistId) to make debugging easier
- When handling image uploads, implement proper fallback mechanisms and clear error messages
- When using React Query with Next.js, prefer direct data access over redundant local state to avoid synchronization issues
- Use whitespace-nowrap to prevent text from breaking into multiple lines in fixed-height buttons
- When displaying sorted data, create a new sorted array to avoid mutating props
- For React Query data fetching, consider adding isFetching to loading states to prevent flash of incorrect content
- For data fetching components, prefer passing data as props from a parent container rather than fetching directly in presentational components to improve reusability, testing, and maintain single source of truth
- When mapping over data to create UI elements, extract complex elements into their own components to improve reusability, testability, and maintainability rather than defining them inline
- When using Langchain with Vercel AI SDK, use the built-in LangChainAdapter to properly connect streaming responses with the UI
- When using LangGraph's MemorySaver, ensure thread_id is provided in the configurable property of agent.stream() calls

# Scratchpad

## Current Task: SegmentFansTool (Step 30) - Context Improvement

### Task Analysis - UPDATED

Current State:

- Tool is working but requires manual segmentId input
- AI has to prompt user for segmentId
- We have access to segmentId in chat context
- Currently trying to get segmentId from URL params, but users navigate via room_id

Required Behavior:

- Tool should automatically get segmentId from chat context
- No user prompting needed for segmentId
- Maintain existing functionality
- Get segmentId by querying with room_id
- Only load segment tool when needed

### Implementation Plan - REVISED

[X] Phase 1: Database Schema Analysis
[X] Phase 2: Core Implementation
[X] Phase 3: Integration
[X] Phase 4: Route Integration
[X] Phase 5: Room-Segment Integration
[X] Phase 6: Tool Simplification
[X] Phase 7: Agent Optimization

1. [x] Update chat route to accept segmentId in request body

   - Added segmentId extraction from request body
   - Pass segmentId to agent.stream() in configurable
   - Pass segmentId to agent initialization

2. [x] Update getSegmentFansTool to use configurable context

   - Modified tool to accept optional segmentId
   - Added context awareness using runnable.configurable
   - Enhanced logging for better debugging
   - Updated schema description

3. [x] Update client-side chat component to pass segmentId

   - Added segmentId from URL params in useMessages hook
   - Included in request body to chat API

4. [x] Implement Room-Segment Integration
       a. [x] Create Supabase Query Function

   - Created getSegmentIdForRoomId with error handling
   - Added detailed logging for debugging

   b. [x] Create API Route

   - Implemented /api/roomSegment GET endpoint
   - Added proper error handling and validation

   c. [x] Create React Query Hook

   - Created useChatSegment hook with caching
   - Added error handling and types
   - Set appropriate stale time and retry logic

   d. [x] Update useMessages Hook

   - Replaced URL param with query result
   - Added error handling
   - Fixed type safety issues with chatId

5. [x] Simplify Tool Implementation

   - Removed input option from getSegmentFansTool
   - Tool now only uses context.segmentId
   - Updated schema and description
   - Simplified error messages

6. [x] Optimize Agent Initialization

   - Added segmentId to AgentOptions type
   - Only include getSegmentFansTool when segmentId is provided
   - Pass segmentId through configurable context
   - Updated chat route to pass segmentId to initialization

7. [ ] Testing
   - Test with segmentId from room query
   - Test fallback behavior without segmentId
   - Verify tool receives segmentId from context
   - Verify tool is only loaded when needed

Benefits of this approach:

1. Simpler - No need to modify agent initialization
2. More flexible - Can change segmentId per request
3. Follows existing pattern of using configurable in agent.stream()
4. Maintains backward compatibility
5. Properly handles room-based navigation
6. Type-safe implementation with proper error handling
7. Cleaner tool implementation with single source of truth (context)
8. Optimized agent loading - tools only included when needed

Status: ðŸš§ Ready for Testing

Testing Plan:

1. Manual Testing

   - Navigate to a chat room
   - Verify segmentId is fetched from room_id
   - Check server logs for tool execution
   - Confirm tool works with fetched segmentId
   - Verify tool is not loaded in non-segment chats

2. Error Cases

   - Test behavior when room has no segment
   - Verify error handling in API route
   - Check error message when context is missing

3. Integration Testing
   - Full flow from room navigation to tool execution
   - Verify context persistence across messages
   - Check memory saving with correct context
   - Verify tool availability matches segmentId presence

Next Steps:

1. Test the implementation manually
2. Monitor logs for correct data flow
3. Verify error handling in all components
4. Check tool loading behavior
