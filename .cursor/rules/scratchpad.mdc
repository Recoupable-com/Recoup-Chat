---
description: Documenting your thinking process, research and implementation plans
globs: 
alwaysApply: true
---
During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the [scratchpad.mdc](mdc:.cursor/rules/scratchpad.mdc) file so you will not make the same mistake again.

# Lessons

## User Specified Lessons

- You have an env in ./.env Use it.
- Read the file before you try to edit it.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns
    
## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When implementing file uploads:

  - Always validate response types and add proper error handling
  - Add progress tracking, size validation, and retry logic
  - Use shared utilities for common operations to maintain consistency
  - Consider adding progress tracking and retry logic
  - When using Node.js SDKs in Next.js:
    - Check for Node.js specific dependencies
    - Use separate client/server implementations
    - Watch for logger and file system dependencies
    - Properly type ReadableStreams for web environment
    - Keep authenticated clients at module level for efficiency
    - Remove duplicate code and types when possible
    - Maintain consistent error handling patterns
- When refactoring API endpoints to lookup data instead of passing it directly:
  - Create specific utility functions for single lookups (not just array lookups)
  - Keep optional parameters for backwards compatibility 
  - Use proper error handling with fallbacks
  - Update both server-side API and client-side hooks consistently

You should use the [scratchpad.md](mdc:scratchpad.md) file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Current Task: Add Starter Agents section to initial chat page

## Task Explanation
Add a "Starter Agents" section to the initial chat page that displays 3 agent cards from the agents tab underneath the text input box. Requirements:
1. Don't move the text input box or welcome message
2. Add section underneath the text input 
3. Display 3 carefully selected agent cards from the agents list
4. Use existing AgentCard component and styling
5. Section should be called "Starter Agents"
6. ✅ **UPDATE**: Left-align header and match welcome message font styling

## Task Progress
[X] Explore repository structure and understand current chat page layout
[X] Understand how agents are structured and displayed
[X] Identify where to add the starter agents section
[X] Check available agents via API to select 3 good starter agents
[X] Create StarterAgents component
[X] Integrate StarterAgents component into Chat component
[X] Test the implementation
[X] Update header styling to match welcome message and left-align

## Findings:
- Initial chat page is in app/chat/page.tsx which renders <Chat> component
- Chat component is in components/VercelChat/chat.tsx
- Current layout shows ChatGreeting → ChatPrompt → ChatInput when no messages
- Agents are fetched from /api/agent-templates
- AgentCard component is reusable and takes agent object and onClick handler
- Agent cards navigate to /chat?q={agent.prompt} when clicked
- Selected 3 starter agents: Social Performance Audit, Release Optimization, Fan Engagement Strategy
- Welcome message uses Plus Jakarta Sans font with specific responsive sizing

## Components involved:
- components/VercelChat/chat.tsx - main chat component ✅ updated
- components/Agents/AgentCard.tsx - reusable agent card component ✅ reused
- components/Agents/useAgentData.ts - hook for fetching agents ✅ reused types
- components/Chat/StarterAgents.tsx - new component ✅ created & styled

## Completed:
- ✅ Created StarterAgents component with 3 handpicked agents
- ✅ Added proper fade-in animations matching existing components  
- ✅ Integrated into Chat component after ChatInput when no messages
- ✅ Used responsive grid layout (1 col mobile, 3 cols desktop)
- ✅ Reused existing AgentCard component and styling patterns
- ✅ Component only shows on initial chat page (when isVisible=true)
- ✅ Clicking agent cards navigates to /chat?q={agent.prompt}
- ✅ **Updated header styling to match welcome message font and left-align**
- ✅ **IMPORTANT: Replaced hardcoded agents with dynamic database fetching**

## Implementation Details:
- StarterAgents appears underneath text input only on initial chat page
- Uses same fade animation timing as other chat components (200ms delay)
- Responsive: single column on mobile, 3 columns on desktop
- ✅ **Header now left-aligned and uses Plus Jakarta Sans font matching welcome message**
- ✅ **Font sizing: 19px → 22px → 28px with proper line-height and tracking**
- ✅ **Dynamically fetches agents from /api/agent-templates (same as main agents page)**
- ✅ **Smart filtering: prioritizes agents with Social/Assistant/Marketing/Recommended tags**
- ✅ **Includes loading states with skeleton placeholders**
- ✅ **Falls back to first 3 agents if filtering yields insufficient results**
- Selected diverse agents covering social media, releases, and fan engagement

## Summary:
Successfully added a "Starter Agents" section to the initial chat page with 3 dynamically selected agent cards from the Supabase database. The header is left-aligned and styled to match the welcome message font. Most importantly, the component now fetches live data from the database instead of using hardcoded agents, ensuring consistency and maintainability. The implementation provides proper loading states and follows the same data patterns as the main agents page.
