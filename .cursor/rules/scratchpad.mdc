---
description: Documenting your thinking process, research and implementation plans
globs: 
alwaysApply: true
---
During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the [scratchpad.mdc](mdc:.cursor/rules/scratchpad.mdc) file so you will not make the same mistake again.

# Lessons

## User Specified Lessons

- You have an env in ./.env Use it.
- Read the file before you try to edit it.
- Keep all files under 100 lines of code to maintain readability and follow single responsibility principle
- Split hooks/components when they grow too large or handle multiple concerns
    
## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When implementing file uploads:

  - Always validate response types and add proper error handling
  - Add progress tracking, size validation, and retry logic
  - Use shared utilities for common operations to maintain consistency
  - Consider adding progress tracking and retry logic
  - When using Node.js SDKs in Next.js:
    - Check for Node.js specific dependencies
    - Use separate client/server implementations
    - Watch for logger and file system dependencies
    - Properly type ReadableStreams for web environment
    - Keep authenticated clients at module level for efficiency
    - Remove duplicate code and types when possible
    - Maintain consistent error handling patterns
- When refactoring API endpoints to lookup data instead of passing it directly:
  - Create specific utility functions for single lookups (not just array lookups)
  - Keep optional parameters for backwards compatibility 
  - Use proper error handling with fallbacks
  - Update both server-side API and client-side hooks consistently

You should use the [scratchpad.md](mdc:scratchpad.md) file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Current Task: Refactor /api/chat to lookup email by accountId

## Task Explanation
Refactor the /api/chat endpoint to:
1. Remove the email param from the request body (but keep it optional for backwards compatibility)
2. Use the accountId to lookup the email from the account_emails table
3. Check if there's already a utility function in /lib/supabase for email lookup
4. Update useVercelChat to remove the unused email param

## Task Progress
[X] Explore repository structure and locate chat API
[X] Check existing supabase utilities for email lookup
[X] Create new getAccountEmail utility function for single email lookup
[X] Update /api/chat to use accountId lookup instead of direct email parameter
[X] Keep email parameter as optional for backwards compatibility
[X] Update useVercelChat hook to remove email from request body
[X] Ensure proper error handling and fallbacks

## Findings:
- Found existing `getAccountEmails` function that takes array of accountIds
- Created new `getAccountEmail` function for single email lookup by accountId
- Chat API now lookups email using accountId with fallback to passed email
- useVercelChat hook simplified by removing email parameter
- Maintained backwards compatibility by keeping email as optional parameter

## Completed:
- Created: `lib/supabase/accountEmails/getAccountEmail.ts` - utility to get single email by accountId
- Updated: `app/api/chat/route.ts` - now uses accountId lookup with email fallback 
- Updated: `hooks/useVercelChat.ts` - removed email parameter from request body
- All changes maintain backwards compatibility and proper error handling
- Ready for testing and deployment
